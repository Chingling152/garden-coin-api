// <auto-generated />
using System;
using GardenCoin.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GardenCoin.Infra.Migrations.Migrations
{
    [DbContext(typeof(GardenCoinContext))]
    [Migration("20220726015710_v0.1.0")]
    partial class v010
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GardenCoin.Domain.Entities.AtivoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_ATIVO");

                    b.Property<Guid>("BalancoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRICAO");

                    b.Property<Guid>("IdBalanco")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_BALANCO");

                    b.Property<Guid>("IdTipoAtivo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_TIPO_ATIVO");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("QUANTIDADE");

                    b.Property<Guid>("TipoAtivoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ValorUnitario")
                        .HasColumnType("float")
                        .HasColumnName("VALOR_UNITARIO");

                    b.HasKey("Id");

                    b.HasIndex("BalancoId");

                    b.HasIndex("IdBalanco");

                    b.HasIndex("IdTipoAtivo");

                    b.HasIndex("TipoAtivoId");

                    b.ToTable("TB_ATIVO");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.Auth.LoginEntity", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SENHA");

                    b.HasKey("IdUsuario", "Email");

                    b.ToTable("TB_LOGIN");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.Auth.UsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DT_CRIACAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOME");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SOBRENOME");

                    b.HasKey("Id");

                    b.ToTable("TB_USUARIO");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.BalancoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_BALANCO");

                    b.Property<Guid>("CarteiraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCarteira")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_CARTEIRA");

                    b.Property<double>("ValorTotal")
                        .HasColumnType("float")
                        .HasColumnName("VALOR_TOTAL");

                    b.HasKey("Id");

                    b.HasIndex("CarteiraId");

                    b.HasIndex("IdCarteira");

                    b.ToTable("TB_BALANCO");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CarteiraEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_CARTEIRA");

                    b.Property<Guid>("CorretoraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DT_ATUALIZACAO");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DT_CRIACAO");

                    b.Property<Guid>("IdBalanco")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_BALANCO");

                    b.Property<Guid>("IdCorretora")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_CORRETORA");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_USUARIO");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ValorTotal")
                        .HasColumnType("float")
                        .HasColumnName("VALOR_TOTAL");

                    b.HasKey("Id");

                    b.HasIndex("CorretoraId");

                    b.HasIndex("IdCorretora");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TB_CARTEIRA");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CdbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_CDB");

                    b.Property<Guid>("BalancoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRICAO");

                    b.Property<Guid>("IdBalanco")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_BALANCO");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("QUANTIDADE");

                    b.Property<double>("ValorBruto")
                        .HasColumnType("float")
                        .HasColumnName("VALOR_BRUTO");

                    b.Property<double>("ValorLiquido")
                        .HasColumnType("float")
                        .HasColumnName("VALOR_LIQUIDO");

                    b.HasKey("Id");

                    b.HasIndex("BalancoId");

                    b.HasIndex("IdBalanco");

                    b.ToTable("TB_CDB");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CorretoraEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_CORRETORA");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOME");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("ULTIMA_ATUALIZACAO");

                    b.HasKey("Id");

                    b.ToTable("TB_CORRETORA");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.TipoAtivoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID_TIPO_ATIVO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOME");

                    b.HasKey("Id");

                    b.ToTable("TB_TIPO_ATIVO");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.AtivoEntity", b =>
                {
                    b.HasOne("GardenCoin.Domain.Entities.BalancoEntity", "Balanco")
                        .WithMany()
                        .HasForeignKey("BalancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.BalancoEntity", null)
                        .WithMany("Ativos")
                        .HasForeignKey("IdBalanco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.TipoAtivoEntity", null)
                        .WithMany("Ativos")
                        .HasForeignKey("IdTipoAtivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.TipoAtivoEntity", "TipoAtivo")
                        .WithMany()
                        .HasForeignKey("TipoAtivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balanco");

                    b.Navigation("TipoAtivo");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.Auth.LoginEntity", b =>
                {
                    b.HasOne("GardenCoin.Domain.Entities.Auth.UsuarioEntity", "Usuario")
                        .WithMany("Logins")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.BalancoEntity", b =>
                {
                    b.HasOne("GardenCoin.Domain.Entities.CarteiraEntity", "Carteira")
                        .WithMany()
                        .HasForeignKey("CarteiraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.CarteiraEntity", null)
                        .WithMany("Balancos")
                        .HasForeignKey("IdCarteira")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carteira");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CarteiraEntity", b =>
                {
                    b.HasOne("GardenCoin.Domain.Entities.CorretoraEntity", "Corretora")
                        .WithMany()
                        .HasForeignKey("CorretoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.CorretoraEntity", null)
                        .WithMany("Carteiras")
                        .HasForeignKey("IdCorretora")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.Auth.UsuarioEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corretora");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CdbEntity", b =>
                {
                    b.HasOne("GardenCoin.Domain.Entities.BalancoEntity", "Balanco")
                        .WithMany()
                        .HasForeignKey("BalancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenCoin.Domain.Entities.BalancoEntity", null)
                        .WithMany("Cdbs")
                        .HasForeignKey("IdBalanco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balanco");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.Auth.UsuarioEntity", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.BalancoEntity", b =>
                {
                    b.Navigation("Ativos");

                    b.Navigation("Cdbs");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CarteiraEntity", b =>
                {
                    b.Navigation("Balancos");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.CorretoraEntity", b =>
                {
                    b.Navigation("Carteiras");
                });

            modelBuilder.Entity("GardenCoin.Domain.Entities.TipoAtivoEntity", b =>
                {
                    b.Navigation("Ativos");
                });
#pragma warning restore 612, 618
        }
    }
}
